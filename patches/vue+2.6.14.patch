diff --git a/node_modules/vue/dist/vue.runtime.common.dev.js b/node_modules/vue/dist/vue.runtime.common.dev.js
index 954310c..52b900c 100644
--- a/node_modules/vue/dist/vue.runtime.common.dev.js
+++ b/node_modules/vue/dist/vue.runtime.common.dev.js
@@ -4829,7 +4829,7 @@ function defineComputed (
 function createComputedGetter (key) {
   return function computedGetter () {
     var watcher = this._computedWatchers && this._computedWatchers[key];
-    if (watcher) {
+    if (watcher && watcher.active) {
       if (watcher.dirty) {
         watcher.evaluate();
       }
@@ -5384,7 +5384,9 @@ var KeepAlive = {
         ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
         : vnode.key;
       if (cache[key]) {
-        vnode.componentInstance = cache[key].componentInstance;
+        var { _isDestroyed } = cache[key].componentInstance
+        if (_isDestroyed) cache[key] = vnode
+        else vnode.componentInstance = cache[key].componentInstance
         // make current key freshest
         remove(keys, key);
         keys.push(key);
@@ -6968,7 +6970,7 @@ function updateDOMListeners (oldVnode, vnode) {
   }
   var on = vnode.data.on || {};
   var oldOn = oldVnode.data.on || {};
-  target$1 = vnode.elm;
+  target$1 = vnode.elm || oldVnode.elm;
   normalizeEvents(on);
   updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
   target$1 = undefined;
@@ -6976,7 +6978,8 @@ function updateDOMListeners (oldVnode, vnode) {
 
 var events = {
   create: updateDOMListeners,
-  update: updateDOMListeners
+  update: updateDOMListeners,
+  destroy: (vnode) => updateDOMListeners(vnode, emptyNode)
 };
 
 /*  */
diff --git a/node_modules/vue/dist/vue.runtime.esm.js b/node_modules/vue/dist/vue.runtime.esm.js
index 83851f5..411e416 100644
--- a/node_modules/vue/dist/vue.runtime.esm.js
+++ b/node_modules/vue/dist/vue.runtime.esm.js
@@ -4846,7 +4846,7 @@ function defineComputed (
 function createComputedGetter (key) {
   return function computedGetter () {
     var watcher = this._computedWatchers && this._computedWatchers[key];
-    if (watcher) {
+    if (watcher && watcher.active) {
       if (watcher.dirty) {
         watcher.evaluate();
       }
@@ -5404,7 +5404,9 @@ var KeepAlive = {
         ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
         : vnode.key;
       if (cache[key]) {
-        vnode.componentInstance = cache[key].componentInstance;
+        var { _isDestroyed } = cache[key].componentInstance
+        if (_isDestroyed) cache[key] = vnode
+        else vnode.componentInstance = cache[key].componentInstance
         // make current key freshest
         remove(keys, key);
         keys.push(key);
@@ -6990,7 +6992,7 @@ function updateDOMListeners (oldVnode, vnode) {
   }
   var on = vnode.data.on || {};
   var oldOn = oldVnode.data.on || {};
-  target$1 = vnode.elm;
+  target$1 = vnode.elm || oldVnode.elm;
   normalizeEvents(on);
   updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
   target$1 = undefined;
@@ -6998,7 +7000,8 @@ function updateDOMListeners (oldVnode, vnode) {
 
 var events = {
   create: updateDOMListeners,
-  update: updateDOMListeners
+  update: updateDOMListeners,
+  destroy: (vnode) => updateDOMListeners(vnode, emptyNode)
 };
 
 /*  */
